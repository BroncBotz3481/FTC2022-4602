Index: Team4602Auto1ParkingRedLeft.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.firstinspires.ftc.teamcode;\r\n\r\nimport android.graphics.Color;\r\n\r\nimport com.qualcomm.robotcore.eventloop.opmode.Autonomous;\r\nimport com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\r\nimport com.qualcomm.robotcore.hardware.DcMotor;\r\nimport com.qualcomm.robotcore.hardware.NormalizedRGBA;\r\nimport com.qualcomm.robotcore.hardware.SwitchableLight;\r\nimport com.qualcomm.robotcore.util.ElapsedTime;\r\n\r\n@Autonomous(name=\"Team4602Auto1ParkingVision\", group=\"4602\")\r\n\r\npublic class Team4602Auto1ParkingRedLeft extends LinearOpMode{\r\n    Team4602HWMap2023 robot = new Team4602HWMap2023();\r\n    ElapsedTime Time = new ElapsedTime();\r\n\r\n    double multy = 0.3;\r\n    int OPG = 0; // 1 = Orange, 2 = Green, 3 = Purple\r\n    float[] hsvValues = new float[3];\r\n    int count = 0;\r\n\r\n    @Override\r\n    public void runOpMode() {\r\n        robot.Map(hardwareMap);\r\n        double distance = 20;\r\n        double tick;\r\n\r\n        if (robot.ColorSensor instanceof SwitchableLight) {\r\n            ((SwitchableLight)robot.ColorSensor).enableLight(true);\r\n        }\r\n\r\n\r\n        waitForStart();\r\n\r\n\r\n        //Drive forward\r\n        distance = 20;\r\n        multy = 0.15;\r\n        // robot.DriveLeftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        //  robot.DriveLeftFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\r\n        tick = (distance * 537.7)/(4 * Math.PI);\r\n        Time.reset();\r\n        robot.DriveRightFront.setPower(-multy);\r\n        robot.DriveLeftFront.setPower(-multy);\r\n        robot.DriveRightBack.setPower(-multy);\r\n        robot.DriveLeftBack.setPower(-multy);\r\n        while(opModeIsActive() && Time.milliseconds() < 5400 && robot.DriveLeftFront.getCurrentPosition() < tick) {\r\n            telemetry.addData(\"Encoder Val\", robot.DriveLeftFront.getCurrentPosition());\r\n            // telemetry.update();\r\n        }\r\n        robot.DriveRightFront.setPower(0);\r\n        robot.DriveLeftFront.setPower(0);\r\n        robot.DriveRightBack.setPower(0);\r\n        robot.DriveLeftBack.setPower(0);\r\n        //  robot.DriveLeftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        //  robot.DriveLeftFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\r\n        sleep(1000);\r\n\r\n        Time.reset();\r\n        while (opModeIsActive() && count < 5) {\r\n            if (robot.ColorSensor instanceof SwitchableLight) {\r\n                SwitchableLight light = (SwitchableLight) robot.ColorSensor;\r\n                light.enableLight(!light.isLightOn());\r\n            }\r\n            NormalizedRGBA colors = robot.ColorSensor.getNormalizedColors();\r\n\r\n            Color.colorToHSV(colors.toColor(), hsvValues);\r\n\r\n            telemetry.addLine()\r\n                    .addData(\"H\", \"%.3f\", hsvValues[0])\r\n                    .addData(\"S\", \"%.3f\", hsvValues[1])\r\n                    .addData(\"V\", \"%.3f\", hsvValues[2]);\r\n            telemetry.addLine()\r\n                    .addData(\"a\", \"%.3f\", colors.alpha)\r\n                    .addData(\"r\", \"%.3f\", colors.red)\r\n                    .addData(\"g\", \"%.3f\", colors.green)\r\n                    .addData(\"b\", \"%.3f\", colors.blue);\r\n            telemetry.update();\r\n            /** We also display a conversion of the colors to an equivalent Android color integer.\r\n             * @see Color */\r\n            int color = colors.toColor();\r\n            /*telemetry.addLine(\"in color: \")\r\n                    .addData(\"color\", color);\r\n            telemetry.addLine(\"raw Android color: \")\r\n                    .addData(\"a\", \"%02x\", Color.alpha(color))\r\n                    .addData(\"r\", \"%02x\", Color.red(color))\r\n                    .addData(\"g\", \"%02x\", Color.green(color))\r\n                    .addData(\"b\", \"%02x\", Color.blue(color));*/\r\n\r\n            float max = Math.max(Math.max(Math.max(colors.red, colors.green), colors.blue), colors.alpha);\r\n            colors.red /= max;\r\n            colors.green /= max;\r\n            colors.blue /= max;\r\n            color = colors.toColor();\r\n\r\n           /* telemetry.addLine(\"normalized color:  \")\r\n                    .addData(\"a\", \"%02x\", Color.alpha(color))\r\n                    .addData(\"r\", \"%02x\", Color.red(color))\r\n                    .addData(\"g\", \"%02x\", Color.green(color))\r\n                    .addData(\"b\", \"%02x\", Color.blue(color));\r\n            telemetry.update(); */\r\n            count++;\r\n        }\r\n\r\n\r\n        Time.reset();\r\n        while (opModeIsActive() && Time.milliseconds() < 300){\r\n            int Hvalue = (int) hsvValues[0];\r\n            if (Hvalue >= 0 && Hvalue <= 140){\r\n                OPG = 1;\r\n            }\r\n            else if(Hvalue > 140 && Hvalue <= 152) {\r\n                OPG = 2;\r\n            }\r\n            else{\r\n                OPG = 3;\r\n            }\r\n        }\r\n        //Drive forward\r\n        distance = 20;\r\n        multy = 0.15;\r\n        //  robot.DriveLeftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        //  robot.DriveLeftFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\r\n        tick = (distance * 537.7)/(4 * Math.PI);\r\n        Time.reset();\r\n        robot.DriveRightFront.setPower(-multy);\r\n        robot.DriveLeftFront.setPower(-multy);\r\n        robot.DriveRightBack.setPower(-multy);\r\n        robot.DriveLeftBack.setPower(-multy);\r\n        while(opModeIsActive() && Time.milliseconds() < 2000 && robot.DriveLeftFront.getCurrentPosition() < tick) {\r\n            telemetry.addData(\"Encoder Val\", robot.DriveLeftFront.getCurrentPosition());\r\n            //telemetry.update();\r\n        }\r\n        robot.DriveRightFront.setPower(0);\r\n        robot.DriveLeftFront.setPower(0);\r\n        robot.DriveRightBack.setPower(0);\r\n        robot.DriveLeftBack.setPower(0);\r\n        //  robot.DriveLeftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n        //  robot.DriveLeftFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\r\n        sleep(1000);\r\n\r\n        if(OPG == 1){\r\n            //Strafe Left\r\n            distance = 20;\r\n            multy = 0.4;\r\n            // robot.DriveLeftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n            //  robot.DriveLeftFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\r\n            tick = (distance * 537.7)/(4 * Math.PI);\r\n            Time.reset();\r\n            robot.DriveRightFront.setPower(-multy);\r\n            robot.DriveLeftFront.setPower(multy);\r\n            robot.DriveRightBack.setPower(multy);\r\n            robot.DriveLeftBack.setPower(-multy);\r\n            while(opModeIsActive() && Time.milliseconds() < 2000 && robot.DriveLeftFront.getCurrentPosition() < tick) {\r\n                telemetry.addData(\"Encoder Val\", robot.DriveLeftFront.getCurrentPosition());\r\n                //telemetry.update();\r\n            }\r\n            robot.DriveRightFront.setPower(0);\r\n            robot.DriveLeftFront.setPower(0);\r\n            robot.DriveRightBack.setPower(0);\r\n            robot.DriveLeftBack.setPower(0);\r\n            //  robot.DriveLeftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n            //  robot.DriveLeftFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\r\n            sleep(1000);\r\n        }\r\n        else if (OPG == 3){\r\n            //Strafe Right\r\n            distance = 20;\r\n            multy = 0.4;\r\n            // robot.DriveLeftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n            //  robot.DriveLeftFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\r\n            tick = (distance * 537.7)/(4 * Math.PI);\r\n            Time.reset();\r\n            robot.DriveRightFront.setPower(multy);\r\n            robot.DriveLeftFront.setPower(-multy);\r\n            robot.DriveRightBack.setPower(-multy);\r\n            robot.DriveLeftBack.setPower(multy);\r\n            while(opModeIsActive() && Time.milliseconds() < 2000 && robot.DriveLeftFront.getCurrentPosition() < tick) {\r\n                telemetry.addData(\"Encoder Val\", robot.DriveLeftFront.getCurrentPosition());\r\n                //telemetry.update();\r\n            }\r\n            robot.DriveRightFront.setPower(0);\r\n            robot.DriveLeftFront.setPower(0);\r\n            robot.DriveRightBack.setPower(0);\r\n            robot.DriveLeftBack.setPower(0);\r\n            //  robot.DriveLeftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n            //  robot.DriveLeftFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\r\n            sleep(1000);\r\n\r\n            //Back\r\n            distance = 20;\r\n            multy = 0.25;\r\n            // robot.DriveLeftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n            //  robot.DriveLeftFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\r\n            tick = (distance * 537.7)/(4 * Math.PI);\r\n            Time.reset();\r\n            robot.DriveRightFront.setPower(multy);\r\n            robot.DriveLeftFront.setPower(multy);\r\n            robot.DriveRightBack.setPower(multy);\r\n            robot.DriveLeftBack.setPower(multy);\r\n            while(opModeIsActive() && Time.milliseconds() < 500 && robot.DriveLeftFront.getCurrentPosition() < tick) {\r\n                telemetry.addData(\"Encoder Val\", robot.DriveLeftFront.getCurrentPosition());\r\n                //telemetry.update();\r\n            }\r\n            robot.DriveRightFront.setPower(0);\r\n            robot.DriveLeftFront.setPower(0);\r\n            robot.DriveRightBack.setPower(0);\r\n            robot.DriveLeftBack.setPower(0);\r\n            //  robot.DriveLeftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\r\n            //  robot.DriveLeftFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\r\n            sleep(1000);\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Team4602Auto1ParkingRedLeft.java b/Team4602Auto1ParkingRedLeft.java
--- a/Team4602Auto1ParkingRedLeft.java	
+++ b/Team4602Auto1ParkingRedLeft.java	
@@ -1,4 +1,4 @@
-package org.firstinspires.ftc.teamcode;
+-package org.firstinspires.ftc.teamcode;
 
 import android.graphics.Color;
 
@@ -143,7 +143,7 @@
         if(OPG == 1){
             //Strafe Left
             distance = 20;
-            multy = 0.4;
+            multy = 0.5;
             // robot.DriveLeftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
             //  robot.DriveLeftFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
             tick = (distance * 537.7)/(4 * Math.PI);
@@ -167,7 +167,7 @@
         else if (OPG == 3){
             //Strafe Right
             distance = 20;
-            multy = 0.4;
+            multy = 0.5;
             // robot.DriveLeftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
             //  robot.DriveLeftFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
             tick = (distance * 537.7)/(4 * Math.PI);
Index: ../../../../../../../.idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"GRADLE\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"1.8\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
===================================================================
diff --git a/../../../../../../../.idea/gradle.xml b/../../../../../../../.idea/gradle.xml
--- a/../../../../../../../.idea/gradle.xml	
+++ b/../../../../../../../.idea/gradle.xml	
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
